file = { SOI ~ expn ~ EOI }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ "(*" ~ ANY* ~ "*)" }

keywords = @{ "if" | "then" | "else" | "end" | "andalso" | "orelse" | "let" | "fun" | "val" | "fn" }
char = { ASCII_ALPHANUMERIC | "_" }
reserved = @{ keywords ~ !char }
ident = @{ !reserved ~ char+ }

// binary operators
appl = { "" }
plus = { "+" }
minus = { "-" }
times = { "*" }
div = { "//" }
modulus = { "%" } // mod is a reserved rust name
expt = { "**" }
and = { "andalso" }
or = { "orelse" }
lt = { "<" }
gt = { ">" }
leq = { "<=" }
geq = { ">=" }
eq = { "==" }

// unary operators
not = { "!" }
neg = { "~" }

// let bindings
fun = { "fun" }
val = { "val" }

// booleans
t = { "true" }
f = { "false" }

expn = { cond | bind | binop | unop | atom }
cond = { "if" ~ expn ~ "then" ~ expn ~ "else" ~ expn ~ "end" }
bind = { "let" ~ (fun | val) ~ ident ~ "=" ~ expn ~ "in" ~ expn ~ "end" }

binop = { atom ~ ( binops ~ atom )* }
binops = _{ plus | minus | times | div | modulus | expt | and | or | lt | gt | leq | geq | eq | appl }

unop = { unops ~ ( unop | atom ) }
unops = { neg | not }

atom = { pair | paren | value }
pair = { "(" ~ expn ~ "," ~ expn ~ ")" }
paren = { "(" ~ expn ~ ")" }

value = { unit | num | bool | str | lookup | arrow }
unit = { "()" }
num = { ASCII_DIGIT+ }
bool = { t | f }
str = { "\"" ~ (^"\"")* ~ "\"" }
lookup = { ident }
arrow = { "fn" ~ ident ~ "=>" ~ expn } // fn is a reserved rust name
